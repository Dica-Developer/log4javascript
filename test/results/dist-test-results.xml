<?xml version="1.0"?>
<testsuites>
  <testsuite name="PhantomJS 1.9.2 (Mac OS X)" package="" timestamp="2014-01-31T16:31:59" id="0" hostname="jweber-wlan.datameer.lan" tests="205" errors="0" failures="0" time="0.041">
    <properties>
      <property name="browser.fullName" value="Mozilla/5.0 (Macintosh; Intel Mac OS X) AppleWebKit/534.34 (KHTML, like Gecko) PhantomJS/1.9.2 Safari/534.34"/>
    </properties>
    <testcase name=".toString" time="0.003" classname="PhantomJS 1.9.2 (Mac OS X).#Level"/>
    <testcase name=".equal" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Level"/>
    <testcase name=".isGreaterOrEqual" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Level"/>
    <testcase name="#ALL should be defined" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Level"/>
    <testcase name="#FATAL should be defined" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Level"/>
    <testcase name="#ERROR should be defined" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Level"/>
    <testcase name="#WARN should be defined" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Level"/>
    <testcase name="#DEBUG should be defined" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Level"/>
    <testcase name="#TRACE should be defined" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Level"/>
    <testcase name="#INFO should be defined" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Level"/>
    <testcase name="#OFF should be defined" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Level"/>
    <testcase name=".eventTypes should be &quot;[]&quot;" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#EventSupport prototypes"/>
    <testcase name=".eventListeners should be &quot;{}&quot;" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#EventSupport prototypes"/>
    <testcase name="parameter must be Array otherwise handleError should be called" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#EventSupport _setEventTypes"/>
    <testcase name="parameter should replace .eventTypes" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#EventSupport _setEventTypes"/>
    <testcase name=".eventListeners should be empty Array" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#EventSupport _setEventTypes"/>
    <testcase name="@param listener is function" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#EventSupport _addEventListener"/>
    <testcase name="@param listener is function but event type does not exist" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#EventSupport _addEventListener"/>
    <testcase name="@param listener must be function otherwise handelError should be called" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#EventSupport _addEventListener"/>
    <testcase name="@param listener must be function otherwise handelError should be called" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#EventSupport _removeEventListener"/>
    <testcase name="@param listener is function but event type does not exist" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#EventSupport _removeEventListener"/>
    <testcase name="Should remove listener from .eventListeners" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#EventSupport _removeEventListener"/>
    <testcase name="@param eventType must exist otherwise handleError should be called" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#EventSupport _dispatchEvent"/>
    <testcase name="if event exist it should be called" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#EventSupport _dispatchEvent"/>
    <testcase name="object === null" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#formatObjectExpansion"/>
    <testcase name="object === undefined" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#formatObjectExpansion"/>
    <testcase name="object === String (one line)" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#formatObjectExpansion"/>
    <testcase name="object === String (many lines)" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#formatObjectExpansion"/>
    <testcase name="object === Date" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#formatObjectExpansion"/>
    <testcase name="object === array" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#formatObjectExpansion"/>
    <testcase name="object === object" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#formatObjectExpansion"/>
    <testcase name="object === object" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#formatObjectExpansion"/>
    <testcase name="object === function" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#formatObjectExpansion"/>
    <testcase name=".setMinimalDaysInFirstWeek should set .minimalDaysInFirstWeek" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat"/>
    <testcase name=".getMinimalDaysInFirstWeek should return default value if not set" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat"/>
    <testcase name=".getMinimalDaysInFirstWeek should return given number after setting" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat"/>
    <testcase name=".getDifference" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat #Date"/>
    <testcase name=".isBefore" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat #Date"/>
    <testcase name=".getTimeSince" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat #Date"/>
    <testcase name=".getPreviousSunday" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat #Date"/>
    <testcase name=".getDayInYear" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat #Date"/>
    <testcase name=".getWeekInYear" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat #Date"/>
    <testcase name=".getWeekInYear" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat #Date"/>
    <testcase name=".getWeekInYear" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat #Date"/>
    <testcase name=".getWeekInMonth" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat #Date"/>
    <testcase name=".getWeekInMonth" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat #Date"/>
    <testcase name=".getWeekInMonth" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat #Date"/>
    <testcase name="Given parameter should override .formatString" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat #PatternLayout_ABSOLUTETIME_DATEFORMAT = &quot;HH:mm:ss,SSS&quot;"/>
    <testcase name="Pattern &quot;G&quot; should return &quot;AD&quot;" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat _format"/>
    <testcase name="Pattern &quot;y&quot; should return full year" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat _format"/>
    <testcase name="Pattern &quot;M&quot; should return full month" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat _format"/>
    <testcase name="Pattern &quot;w&quot; should return week in year" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat _format"/>
    <testcase name="Pattern &quot;W&quot; should return week in month" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat _format"/>
    <testcase name="Pattern &quot;d&quot; should return day in month" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat _format"/>
    <testcase name="Pattern &quot;D&quot; should return day in year" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat _format"/>
    <testcase name="Pattern &quot;F&quot; should return day of week in month" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat _format"/>
    <testcase name="Pattern &quot;E&quot; should return day in week" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat _format"/>
    <testcase name="Pattern &quot;a&quot; should return AM/PM" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat _format"/>
    <testcase name="Pattern &quot;H&quot; should return hour in day 0-23" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat _format"/>
    <testcase name="Pattern &quot;k&quot; should return hour in day 1-24" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat _format"/>
    <testcase name="Pattern &quot;K&quot; should return hour in am/pm 0-11" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat _format"/>
    <testcase name="Pattern &quot;h&quot; should return hour in am/pm 1-12" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat _format"/>
    <testcase name="Pattern &quot;m&quot; should return minute in hour" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat _format"/>
    <testcase name="Pattern &quot;s&quot; should return second in minute" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat _format"/>
    <testcase name="Pattern &quot;S&quot; should return millisecond" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat _format"/>
    <testcase name="Pattern &quot;Z&quot; should return timezone offset" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat _format"/>
    <testcase name="Quoted patter should return as is" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat _format"/>
    <testcase name="Quoted patter should return as is" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat _format"/>
    <testcase name="Other characters should return as is" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat _format"/>
    <testcase name="Other pattern characters should return nothing" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleDateFormat _format"/>
    <testcase name="check defaults" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Layout prototypes"/>
    <testcase name="prototypes should be same as defaults on initialization" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Layout prototypes"/>
    <testcase name="check other prototypes" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#Layout prototypes"/>
    <testcase name=".format should call handle Error if it is not overridden" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Layout function to override by developing new Appender"/>
    <testcase name=".ignoresThrowable should call handle Error if it is not overridden" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Layout function to override by developing new Appender"/>
    <testcase name=".allowBatching should return true per default" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Layout function to override by developing new Appender"/>
    <testcase name=".getContentType should return &quot;text/plain&quot; per default" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Layout function to override by developing new Appender"/>
    <testcase name=".toString should call handleError if not overridden" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Layout function to override by developing new Appender"/>
    <testcase name="Should set .overrideTimeStampsSetting to true if called" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Layout _setTimeStampsInMilliseconds"/>
    <testcase name="Should set .useTimeStampsInMilliseconds even if given parameter not a boolean" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Layout _setTimeStampsInMilliseconds"/>
    <testcase name="Should return &quot;null&quot; per default" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#Layout _isTimeStampsInMilliseconds"/>
    <testcase name="Should return .useTimeStampsInMilliseconds if .overrideTimeStampsSetting set to true" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Layout _isTimeStampsInMilliseconds"/>
    <testcase name="Should return value in seconds if .isTimeStampsInMilliseconds set to false" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Layout _getTimeStampValue"/>
    <testcase name="Should return value in milliSeconds if .isTimeStampsInMilliseconds set to true" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Layout _getTimeStampValue"/>
    <testcase name="Check default return values" time="0.003" classname="PhantomJS 1.9.2 (Mac OS X).#Layout _getDataValues"/>
    <testcase name="Check default return values with timestamp in millisecond" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#Layout _getDataValues"/>
    <testcase name="Check default return values with combinedMessages true" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Layout _getDataValues"/>
    <testcase name="Check default return values with .customFields" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#Layout _getDataValues"/>
    <testcase name="Check default return values with .customFields as function should call that" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Layout _getDataValues"/>
    <testcase name="Check default return values with exception set to loggingEvent" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Layout _getDataValues"/>
    <testcase name=".setCustomFields should call handleError if name and/or value is not set" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Layout _setCustomField &amp; _hasCustomFields"/>
    <testcase name=".setCustomFields should call handleError if name is not &quot;String &quot;" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Layout _setCustomField &amp; _hasCustomFields"/>
    <testcase name=".setCustomFields should apply give parameter to .customFields" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Layout _setCustomField &amp; _hasCustomFields"/>
    <testcase name=".setCustomFields should update value if name already exist at .customFields" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Layout _setCustomField &amp; _hasCustomFields"/>
    <testcase name=".setCustomFields should add new customField if name not exist" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#Layout _setCustomField &amp; _hasCustomFields"/>
    <testcase name=".hasCustomFields should return &quot;true&quot; if one set" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Layout _setCustomField &amp; _hasCustomFields"/>
    <testcase name="All #entryPoints should be true" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger"/>
    <testcase name="TRACE" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _is&lt;Level&gt;Enabled should call _isEnabledFor"/>
    <testcase name="DEBUG" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _is&lt;Level&gt;Enabled should call _isEnabledFor"/>
    <testcase name="INFO" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _is&lt;Level&gt;Enabled should call _isEnabledFor"/>
    <testcase name="WARN" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _is&lt;Level&gt;Enabled should call _isEnabledFor"/>
    <testcase name="ERROR" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _is&lt;Level&gt;Enabled should call _isEnabledFor"/>
    <testcase name="FATAL" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _is&lt;Level&gt;Enabled should call _isEnabledFor"/>
    <testcase name="Level.ALL" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _is&lt;Level&gt;Enabled should return correct value"/>
    <testcase name="Level.TRACE" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _is&lt;Level&gt;Enabled should return correct value"/>
    <testcase name="DEBUG" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _is&lt;Level&gt;Enabled should return correct value"/>
    <testcase name="INFO" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _is&lt;Level&gt;Enabled should return correct value"/>
    <testcase name="WARN" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _is&lt;Level&gt;Enabled should return correct value"/>
    <testcase name="ERROR" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _is&lt;Level&gt;Enabled should return correct value"/>
    <testcase name="FATAL" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _is&lt;Level&gt;Enabled should return correct value"/>
    <testcase name="Should throw exception (call handleError) if Level not instance of Level" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _setLevel"/>
    <testcase name="Should throw exception (call handleError) if Level === null &amp;&amp; logger is root" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _setLevel"/>
    <testcase name="Should set new Level" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _setLevel"/>
    <testcase name="should return correct name" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _toString"/>
    <testcase name="logger.trace" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _&lt;Level&gt; should call _log with correct arguments"/>
    <testcase name="logger.debug" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _&lt;Level&gt; should call _log with correct arguments"/>
    <testcase name="logger.info" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _&lt;Level&gt; should call _log with correct arguments"/>
    <testcase name="logger.warn" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _&lt;Level&gt; should call _log with correct arguments"/>
    <testcase name="logger.error" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _&lt;Level&gt; should call _log with correct arguments"/>
    <testcase name="logger.fatal" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _&lt;Level&gt; should call _log with correct arguments"/>
    <testcase name="If enabled and called with Level should call .callAppenders" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _log"/>
    <testcase name="If enabled = false should not call .callAppenders" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _log"/>
    <testcase name="should return Level.TRACE" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _getEffectiveLevel"/>
    <testcase name="should return null" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _getEffectiveLevel"/>
    <testcase name="Should call .invalidateAppenderCache on childLogger" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _addChild"/>
    <testcase name="childLogger.parent should be logger" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _addChild"/>
    <testcase name="logger.children.length should be 1" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _addChild"/>
    <testcase name="Should return true per default" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _getAdditivity"/>
    <testcase name="Should change additivity to false" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _setAdditivity"/>
    <testcase name="Should call .invalidateAppenderCache on change" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _setAdditivity"/>
    <testcase name="Should not call .invalidateAppenderCache if nothing has changed" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Logger _setAdditivity"/>
    <testcase name=".getString should return LoggingEvent[TRACE]" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#LoggingEvent"/>
    <testcase name=".getCombinedMessages should return &quot;1&quot;" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#LoggingEvent"/>
    <testcase name=".getCombinedMessages should return &quot;1 -new Line- 2&quot;" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#LoggingEvent"/>
    <testcase name=".getThrowableStrRep should return &quot;&quot; if LoggingEvent.exception is null or false" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#LoggingEvent"/>
    <testcase name=".toString" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleLayout"/>
    <testcase name=".ignoresThrowable" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleLayout"/>
    <testcase name=".format" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#SimpleLayout"/>
    <testcase name=".toString" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#HttpPostDataLayout"/>
    <testcase name=".ignoresThrowable" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#HttpPostDataLayout"/>
    <testcase name=".allowBatching" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#HttpPostDataLayout"/>
    <testcase name=".format" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#HttpPostDataLayout"/>
    <testcase name=".toString" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#JsonLayout"/>
    <testcase name=".ignoresThrowable" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#JsonLayout"/>
    <testcase name=".getContentType" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#JsonLayout"/>
    <testcase name=".isReadable" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#JsonLayout with prettyPrint"/>
    <testcase name=".batchHeader" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#JsonLayout with prettyPrint"/>
    <testcase name=".batchFooter" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#JsonLayout with prettyPrint"/>
    <testcase name=".batchSeparator" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#JsonLayout with prettyPrint"/>
    <testcase name=".colon" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#JsonLayout with prettyPrint"/>
    <testcase name=".tab" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#JsonLayout with prettyPrint"/>
    <testcase name=".lineBreak" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#JsonLayout with prettyPrint"/>
    <testcase name=".isReadable" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#JsonLayout without prettyPrint"/>
    <testcase name=".isCombinedMessages" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#JsonLayout without prettyPrint"/>
    <testcase name=".batchHeader" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#JsonLayout without prettyPrint"/>
    <testcase name=".batchFooter" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#JsonLayout without prettyPrint"/>
    <testcase name=".batchSeparator" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#JsonLayout without prettyPrint"/>
    <testcase name=".colon" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#JsonLayout without prettyPrint"/>
    <testcase name=".tab" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#JsonLayout without prettyPrint"/>
    <testcase name=".lineBreak" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#JsonLayout without prettyPrint"/>
    <testcase name=".format" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#JsonLayout without prettyPrint"/>
    <testcase name=".toString" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#NullLayout"/>
    <testcase name=".ignoresThrowable" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#NullLayout"/>
    <testcase name=".format" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#NullLayout"/>
    <testcase name=".toString" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout"/>
    <testcase name=".pattern" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout"/>
    <testcase name="param not given &quot;DEFAULT_CONVERSION_PATTERN&quot; is default" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _pattern"/>
    <testcase name="param should override pattern" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _pattern"/>
    <testcase name="just text" time="0.003" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _format"/>
    <testcase name="%m - simple" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _format"/>
    <testcase name="%m{0} - with valid specifier" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _format"/>
    <testcase name="%m{invalid} - with invalid specifier" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _format"/>
    <testcase name="%c - simple" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _format"/>
    <testcase name="%c{2} - with valid specifier" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _format"/>
    <testcase name="%c{4} - with invalid specifier" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _format"/>
    <testcase name="%d - simple" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _format"/>
    <testcase name="%d{ISO8601} - with valid specifier" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _format"/>
    <testcase name="%d{ABSOLUTE} - with valid specifier" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _format"/>
    <testcase name="%d{DATE} - with valid specifier" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _format"/>
    <testcase name="%d{TEST} - with invalid specifier" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _format"/>
    <testcase name="%n" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _format"/>
    <testcase name="%p" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _format"/>
    <testcase name="%r" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _format"/>
    <testcase name="%%" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _format"/>
    <testcase name="%l" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _format"/>
    <testcase name="%6p - padding right" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _format"/>
    <testcase name="%-6p - padding left" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _format"/>
    <testcase name="%.3p - truncation" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _format"/>
    <testcase name="%.7p - truncation" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _format"/>
    <testcase name="%M" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#PatternLayout _format"/>
    <testcase name=".toString calls handleError if not overridden" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Appender"/>
    <testcase name=".getLayout should return #PatternLayout per default" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Appender"/>
    <testcase name=".getThreshold should return #Level.ALL per default" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Appender"/>
    <testcase name=".setThreshold should call handleError if give parameter not instance of #Level" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Appender"/>
    <testcase name=".setThreshold should override .treshhold with given parameter" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Appender"/>
    <testcase name=".setLayout should call handleError if give parameter not instance of #Layout" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#Appender"/>
    <testcase name=".setLayout should override .layout with given parameter" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Appender"/>
    <testcase name=".setAddedToLogger should add logger to loggers" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Appender"/>
    <testcase name=".setRemovedFromLogger should remove logger from loggers" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Appender"/>
    <testcase name="Should not call #Appender.append if enabled false" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Appender _doAppend"/>
    <testcase name="Should not call #Appender.append if Level lower then treshhold" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Appender _doAppend"/>
    <testcase name="Should call #Appender.append if Level greater/equal then treshhold" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#Appender _doAppend"/>
    <testcase name=".toString" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#AlertAppender"/>
    <testcase name=".toString" time="0.001" classname="PhantomJS 1.9.2 (Mac OS X).#AlertAppender"/>
    <testcase name=".toString" time="0" classname="PhantomJS 1.9.2 (Mac OS X).#AlertAppender"/>
    <system-out><![CDATA[
]]></system-out>
    <system-err/>
  </testsuite>
</testsuites>
